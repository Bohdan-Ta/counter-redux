{"version":3,"sources":["components/Counter/Counter.module.css","components/Counter/Controls.jsx","components/Counter/Value.jsx","redux/counter-actions.js","components/Counter/Counter.jsx","views/CounterView.jsx","App.js","redux/counter-reducer.js","redux/counter-type.js","redux/store.js","index.js"],"names":["module","exports","Controls","step","onIncrement","onDecrement","className","s","Counter__controls","type","onClick","Value","value","Counter__value","increment","createAction","decrement","connect","state","counter","dispatch","Sections","Counter","CounterView","App","combineReducers","payload","rootReducer","counterReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gKACAA,EAAOC,QAAU,CAAC,SAAW,0BAA0B,QAAU,yBAAyB,kBAAoB,mCAAmC,eAAiB,kC,kGCanJC,EAXE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,YAAtB,OACf,yBAAKC,UAAWC,IAAEC,mBAChB,4BAAQC,KAAK,SAASC,QAASN,GAA/B,uEACgBD,GAEhB,4BAAQM,KAAK,SAASC,QAASL,GAA/B,uEACgBF,KCJLQ,EAFD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAAe,0BAAMN,UAAWC,IAAEM,gBAAiBD,I,OCDpDE,EAAYC,YAAa,qBACzBC,EAAYD,YAAa,qBCqBtC,IASeE,eATS,SAACC,GAAD,MAAY,CAClCN,MAAOM,EAAMC,QAAQP,MACrBT,KAAMe,EAAMC,QAAQhB,SAEK,SAACiB,GAAD,MAAe,CACxChB,YAAa,SAACQ,GAAD,OAAWQ,EAASN,EAAUF,KAC3CP,YAAa,SAACO,GAAD,OAAWQ,EAASJ,EAAUJ,QAG9BK,EA1Bf,YAA6D,IAA1CL,EAAyC,EAAzCA,MAAOT,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,YAC3C,OACE,yBAAKC,UAAWC,IAAEc,UAChB,uCACA,yBAAKf,UAAWC,IAAEe,SAChB,kBAAC,EAAD,CAAOV,MAAOA,IAEd,kBAAC,EAAD,CACET,KAAMA,EACNC,YAAa,kBAAMA,EAAYD,IAC/BE,YAAa,kBAAMA,EAAYF,WCd1B,SAASoB,IACtB,OAAO,kBAAC,EAAD,MCOMC,MARf,WACE,OACE,6BACE,kBAACD,EAAD,Q,cCSSE,4BAAgB,CAC7Bb,MAbmB,WAAmC,IAAlCM,EAAiC,uDAAzB,EAAyB,yCAApBT,EAAoB,EAApBA,KAAMiB,EAAc,EAAdA,QACvC,OAAQjB,GACN,ICLqB,oBDMnB,OAAOS,EAAQQ,EACjB,ICNqB,oBDOnB,OAAOR,EAAQQ,EACjB,QACE,OAAOR,IAOXf,KAJkB,eAACe,EAAD,uDAAS,EAAT,OAAuBA,KE8CrCS,EAAcF,0BAAgB,CAClCN,QAASS,IAIIC,EADDC,sBAAYH,EAAaI,iC,YCvDvCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.32508c3f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sections\":\"Counter_Sections__sX-bD\",\"Counter\":\"Counter_Counter__2InX4\",\"Counter__controls\":\"Counter_Counter__controls__16z3r\",\"Counter__value\":\"Counter_Counter__value__2-PZ3\"};","import React from \"react\";\nimport s from \"./Counter.module.css\";\n\nconst Controls = ({ step, onIncrement, onDecrement }) => (\n  <div className={s.Counter__controls}>\n    <button type=\"button\" onClick={onIncrement}>\n      Увеличить на {step}\n    </button>\n    <button type=\"button\" onClick={onDecrement}>\n      Уменьшить на {step}\n    </button>\n  </div>\n);\n\nexport default Controls;\n","import React from \"react\";\nimport s from \"./Counter.module.css\";\n\nconst Value = ({ value }) => <span className={s.Counter__value}>{value}</span>;\n\nexport default Value;\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const increment = createAction(\"counter/Increment\");\nexport const decrement = createAction(\"counter/Decrement\");\n\n// export const increment = (value) => ({\n//   type: \"counter/Increment\",\n//   payload: value,\n// });\n\n// export const decrement = (value) => ({\n//   type: \"counter/Decrement\",\n//   payload: value,\n// });\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Controls from \"./Controls\";\nimport Value from \"./Value\";\nimport { increment, decrement } from \"../../redux/counter-actions\";\nimport s from \"./Counter.module.css\";\n\nfunction Counter({ value, step, onIncrement, onDecrement }) {\n  return (\n    <div className={s.Sections}>\n      <h1>COUNTER</h1>\n      <div className={s.Counter}>\n        <Value value={value} />\n\n        <Controls\n          step={step}\n          onIncrement={() => onIncrement(step)}\n          onDecrement={() => onDecrement(step)}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  value: state.counter.value,\n  step: state.counter.step,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  onIncrement: (value) => dispatch(increment(value)),\n  onDecrement: (value) => dispatch(decrement(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n","import React from \"react\";\nimport Counter from \"../components/Counter\";\n\nexport default function CounterView() {\n  return <Counter />;\n}\n","import React from \"react\";\nimport CounterView from \"./views/CounterView\";\n\nfunction App() {\n  return (\n    <div>\n      <CounterView />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { INCREMENT, DECREMENT } from \"./counter-type\";\n\nconst valueReducer = (state = 0, { type, payload }) => {\n  switch (type) {\n    case INCREMENT:\n      return state + payload;\n    case DECREMENT:\n      return state - payload;\n    default:\n      return state;\n  }\n};\nconst stepReducer = (state = 5, action) => state;\n\nexport default combineReducers({\n  value: valueReducer,\n  step: stepReducer,\n});\n","export const INCREMENT = \"counter/Increment\";\nexport const DECREMENT = \"counter/Decrement\";\n","import { createStore, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport counterReducer from \"./counter-reducer\";\n\n// const reducer = (state = initialState, { type, payload }) => {\n//   switch (type) {\n//     case \"counter/Increment\":\n//       return {\n//         ...state,\n//         counter: {\n//           ...state.counter,\n//           value: state.counter.value + payload,\n//         },\n//       };\n//     case \"counter/Decrement\":\n//       return {\n//         ...state,\n//         counter: {\n//           ...state.counter,\n//           value: state.counter.value - payload,\n//         },\n//       };\n//     default:\n//       return state;\n//   }\n// };\n// const counterInitialState = { value: 0, step: 1 };\n\n// const valueReducer = (state = 0, { type, payload }) => {\n//   switch (type) {\n//     case \"counter/Increment\":\n//       return state + payload;\n//     case \"counter/Decrement\":\n//       return state - payload;\n//     default:\n//       return state;\n//   }\n// };\n// const stepReducer = (state = 5, action) => state;\n\n// const counterReducer = combineReducers({\n//   value: valueReducer,\n//   step: stepReducer,\n// });\n\n// const counterReducer = (state = counterInitialState, { type, payload }) => {\n//   switch (type) {\n//     case \"counter/Increment\":\n//       return {\n//         ...state,\n//         value: state.value + payload,\n//       };\n//     case \"counter/Decrement\":\n//       return { ...state, value: state.value - payload };\n//     default:\n//       return state;\n//   }\n// };\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}